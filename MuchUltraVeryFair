--thanks to DekuDimz and Anyx, used some of their script for some help 
getgenv().Get = setmetatable({}, {__index = function(Self, Idx) return game:GetService(Idx) end})

getgenv().Toggles = {
    Farm = false,
    KillAura = false,
    MobAura = false,
    AutoRoll = false,
    FarmBoss = false,
    BreakBarrier = false
}

getgenv().FarmSettings = {
    AuraDistance = 6,
    FarmDistance = 3,
    KillPlayers = true,
    SelectedQuest = nil
}

getgenv().AuraSettings = {
    PunchSpeed = 0.15,
    KillDistance = 12,
    Mode = "Punch (Lowest 150ms)"
}


getgenv().RollSettings = {
    Amount = 25,
    Threshold = 15,
    Store = false,
    Hide = false
}


local Players = Get.Players
local Player = Players.LocalPlayer
local Workspace = Get.Workspace
local RunService = Get.RunService
local Rep = Get.ReplicatedStorage
local HttpService = Get.HttpService


local function Save(File, Table)
    if (writefile) then
        local json = HttpService:JSONEncode(Table)
        writefile("UU_"..File..".txt", json)
    else
        print("Saving Not Supported")
    end
end

local function Load(File)
    if not (readfile and isfile) then
        print("Loading Not Supported")
        --File Reading Not supported
        return
    end
    if isfile("UU_"..File..".txt") then
        print("Found File")
        Table = HttpService:JSONDecode(readfile("UU_"..File..".txt"))
        print("Settings Loaded")
        return(Table)
    end
end


getgenv().AbilityDict = {}
local RerollPath = Player.PlayerGui.Reroll
local AbilityList = {}


AbilityDict = Load("AbilityFilter")
for i, v in pairs(RerollPath.Prompt.Prompt.ScrollingFrame:GetChildren()) do
    if v:IsA("TextButton") then
        table.insert(AbilityList, v.Name)
        if not (AbilityDict[v.Name]) then
            AbilityDict[v.Name] = 0
        end
    end
end

AuraSettings = Load("AuraSettings")
RollSettings = Load("RollSettings")
FarmSettings = Load("FarmSettings")

local VirtualUser=Get.VirtualUser
Player.Idled:connect(function()
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end)


local Old = getsenv(Player.PlayerScripts.MoveHandler)

hookfunction(Old.camshake, function()
    return
end)

hookfunction(Old._G.knockback, function()
    return
end)

hookfunction(Old._G.HitEffect, function()
    return
end)
hookfunction(Old._G.flasheffect, function()
    return
end)

hookfunction(Old.addparticle, function()
    return
end)


-- function HideName()
--     for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
--         if v.ClassName == "BillboardGui" then
--             v:Destroy()
--         end
--     end
-- end


local MobList = {}
for i, v in pairs(require(Workspace.EnemyStats)) do
    table.insert(MobList, i) --append name to list
end


local function activateAbility()
    local args = {[1] = false} 
    Rep.ToggleAbility:InvokeServer(unpack(args))
end

local function check(e)
    local script = game:GetService("Players").LocalPlayer.PlayerGui.MainClient.LocalScript
    if getfenv(e) and getfenv(e).script and getfenv(e).script.Name and getfenv(e).script == script then
        return true
    else
        return false
    end
end

local function getDistanceTo(object) 
    return (Player.Character.HumanoidRootPart.Position - object:GetModelCFrame().Position).Magnitude
end

local function getNearestMobs(Type)
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model")  then
            if Toggles.Farm then
                if not(table.find(Type, v.Name)) then
                    continue
                end
            elseif Toggles.MobAura then
                if not(table.find(MobList, v.Name)) then
                    continue
                end
            elseif Toggles.KillAura then
                if not(v:FindFirstChildWhichIsA("Humanoid")) or v.Name == Player.Name then
                    continue
                end
            end
            
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = getDistanceTo(v)
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end

local function getNearestObstacles(barrierOnly)
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model") and (not(table.find(MobList, v.Name)) or v.Name == "Barrier") and v.Name ~= Player.Name then
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if barrierOnly and not v.Name == "Barrier" then
                continue
            end
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = getDistanceTo(v)
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end


local attack = nil
local CurrentEnemy = nil
local PunchCounter = 0

local function AttackFuncGet()
    for _,v in pairs(getgc()) do
        if type(v) == 'function' and check(v) then
            if(debug.getinfo(v).numparams) == 4 then
                attack = v
            end
        end
    end
end


local function Punch(enemy)
    if CurrentEnemy ~= nil and CurrentEnemy == enemy then
        PunchCounter += 1
    else
        CurrentEnemy = enemy
        PunchCounter = 0
    end
    --some script i edited for attack (from Anyx)
    if PunchCounter >= 5 then
        -- wait(1)
        PunchCounter = 0
    end


    if attack then
        attack(Vector3.new(AuraSettings.KillDistance, AuraSettings.KillDistance, AuraSettings.KillDistance),CFrame.new(0,0,0),6,nil)
    else
        AttackFuncGet()
    end
end

local function ArbiterHit(enemy)
    local args = {
        [1] = "Dark Blade",
        [2] = enemy:FindFirstChildWhichIsA("Humanoid")
    }
    Rep.Damage:FireServer(unpack(args))
    Rep.Damage:FireServer(unpack(args))
    Rep.Damage:FireServer(unpack(args))
end

-- local function ArbiterUlt(Enemy)
--     local args = {
--         [1] = "Dark Blade",
--         [2] = Enemy:FindFirstChildWhichIsA("Humanoid"),
--         [4] = {["Ultimate"] = true}
--     }
--     Rep.Damage:FireServer(unpack(args))
-- end

local function EnergyBlade(enemy)
    local args = {
        [1] = "DualSwordHeavy",
        [2] = enemy:FindFirstChildWhichIsA("Humanoid"),
        [3] = Player.Character.Cancellations.Value,
        [4] = {
            [1] = enemy:FindFirstChildWhichIsA("Humanoid")
        }
    }
    Rep.Damage:FireServer(unpack(args))
end



local function hit(enemy)
    if AuraSettings.Mode == "Punch" then
        Punch(enemy)
        wait(AuraSettings.PunchSpeed)
    elseif AuraSettings.Mode == "Dark Blade (Arbiter Only)" then
        ArbiterHit(enemy)
        wait(AuraSettings.PunchSpeed)
    elseif AuraSettings.Mode == "Energy Blade" then
        EnergyBlade(enemy)
        wait(AuraSettings.PunchSpeed)
    end
end


local function quest(quest)
    local args = {
        [1] = quest
    } 
    Rep.TakeQuest:FireServer(unpack(args))
end


local function getQuestMobs(quest)
    local enemyType
    if quest == "Real Amgogus" then 
        enemyType = {"Cripple"}
    elseif quest == "Gaming Disorder" then 
        enemyType = {"Crail"}
    elseif quest == "Kingdom" then 
        enemyType = {"Blyke", "Isen", "Remi", "Zeke"}
    elseif quest == "Rigged Game" then 
        enemyType = {"Arlo", "John", "Seraphina"}
    elseif quest == "Trouble in the backrooms" then 
        enemyType = {"Seer", "John", "Seraphina"}
    elseif quest == "Something is in the sewers" then 
        enemyType = {"Cultist"}
    elseif quest == "Cooking some crossovers" then 
        enemyType = {"Thunderclap"}
    elseif quest == "Troubles from another timeline" then 
        enemyType = {"Roku"}
    elseif quest == "Troubles from another timeline" then 
        enemyType = {"Roku"}
    end
    return(enemyType)
end

local function getOffsetVector(enemy)
    local Vector = Player.Character.HumanoidRootPart.Position - enemy:GetModelCFrame().Position
    local Distance = Vector.Magnitude
    local Normal = Vector3.new(Vector.x/Distance, Vector.y/Distance, Vector.z/Distance)
    local Offset = Normal * FarmSettings.FarmDistance
    local NewPosition = enemy:GetModelCFrame().Position + Offset
    return NewPosition
end

local BossFight = false


local function farm()
    spawn(function()
        while wait() do
            if not BossFight then
                if Toggles.Farm then
                    
                    pcall(function()
                        if not Player.PlayerGui.MainClient.Quest.visible then
                            quest(FarmSettings.SelectedQuest)
                        else
                            local questCount = Player.PlayerGui.MainClient.Quest.Folder.Objective.progress.text:split("/")
                            if questCount[1] == questCount[2] then
                                quest("Completed")
                            end
                        end
            

                        if not Player.Character:FindFirstChild("Head"):FindFirstChild("LeftGlow") then
                            activateAbility()
                        end

                        local enemyType = getQuestMobs(FarmSettings.SelectedQuest)
                        local enemy = getNearestMobs(enemyType)
                        local currentDistance = getDistanceTo(enemy)

                        local obstacle
                        local enemyBarrier = false

                        obstacle = getNearestObstacles(false)
                        if obstacle.Name ~= "Barrier" and not (getDistanceTo(obstacle) < AuraSettings.KillDistance) then
                            enemyBarrier = false
                        end
                        if currentDistance < FarmSettings.AuraDistance then
                            local enemyHp = enemy:FindFirstChildWhichIsA("Humanoid").Health
                            hit(enemy)
                            if (enemyHp - enemy:FindFirstChildWhichIsA("Humanoid").Health) == 0 then
                                enemyBarrier = true
                            end
                        elseif FarmSettings.KillPlayers and obstacle and getDistanceTo(obstacle) < AuraSettings.KillDistance then
                            hit(obstacle)
                        else
                            if currentDistance >= 300 then
                                Player.Character:MoveTo(getOffsetVector(enemy))
                            else
                                Player.Character.Humanoid:MoveTo(getOffsetVector(enemy))
                            end
                        end
                        if obstacle.Name == "Barrier" and currentDistance < FarmSettings.AuraDistance and enemyBarrier then
                            hit(obstacle)
                        end
                    end
                    )

                elseif (Toggles.KillAura or Toggles.MobAura) and not Toggles.Farm then

                    pcall(function()
                        local enemy = getNearestMobs()
                        if getDistanceTo(enemy) < AuraSettings.KillDistance then
                            hit(enemy)
                        end
                    end)

                end
            end
        end
    end)
end


local B = Workspace:FindFirstChild("BossSpawns") --Get enemy names and stats
local BossList = {}
local BossPosition = nil
for i, v in pairs(B:GetChildren()) do
    if (BossPosition == nil) then
        BossPosition = v.CFrame.Position
    end
    table.insert(BossList, v.Name) --append name to list
end


local function LocateBoss()
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model") and table.find(BossList , v.Name) then
            if (v:GetModelCFrame().Position - BossPosition).Magnitude < 30 then
                return v
            end
        end
    end    
end


local function BossFarm()
    spawn(function()
        while wait() and Toggles.FarmBoss do
            pcall(function()
                if Player.PlayerGui.Boss.Enabled == true then
                    BossFight = true
                    local Boss = LocateBoss()
                    wait(0.1)
                    for i,v in pairs(getconnections(Player.PlayerGui.Reroll.bosstp.Yes.MouseButton1Click)) do
                        v.Function()
                    end
                    
                    pcall(function()
                        while Boss.Humanoid.Health > 0 and Toggles.FarmBoss and Boss do
                            Boss = LocateBoss()
                            if not Player.Character:FindFirstChild("Head"):FindFirstChild("LeftGlow") then
                                activateAbility()
                            end

                            if getDistanceTo(Boss)  < AuraSettings.KillDistance then
                                hit(Boss)
                            else 
                                Player.Character.Humanoid:MoveTo(getOffsetVector(Boss))
                                wait(0.1)
                            end
                            if Toggles.BreakBarrier then
                                local Barrier = getNearestObstacles(true)
                                if getDistanceTo(Barrier) < AuraSettings.KillDistance  then
                                    hit(Barrier)
                                end
                            end
                        end
                    end)
                    BossFight = false
                end
                wait(0.1)
            end)
        end
    end)
end





local function getRolledAbilities()
    local abilityResults = {}
    for _i, ability in RerollPath.Rerolls.ScrollingFrame:GetChildren() do
        if (ability.Name ~= "RollTemplate")  then
            continue
        end
        for i, v in next, getconnections(ability.RollTemplate.Accept.MouseButton1Click) do
            for i2, v2 in next, getupvalues(v.Function) do
                if(type(v2) == "table" and v2.Ability) then
                    local ability = {name = nil, potential = nil, accept = nil}
                    ability.name = v2.Ability
                    ability.potential = v2.Potential
                    ability.accept = v.Function
                    table.insert(abilityResults, ability)
                end
            end
        end
    end
    return abilityResults
end

local x = RerollPath.Rerolls.X.AbsolutePosition.X + RerollPath.Rerolls.X.AbsoluteSize.X / 2
local y = RerollPath.Rerolls.X.AbsolutePosition.Y + RerollPath.Rerolls.X.AbsoluteSize.Y


local function clickEndRoll() 
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
end



local count = 0
game:GetService("Players").LocalPlayer.PlayerGui.Reroll.ChildAdded:Connect(function(child)
    if(not Toggles.AutoRoll) then
        return
    end

    if child.Name == "Finished" then
        count = count + 1
        if (count >= 10) then
            count = 0
            spawn(function()
                wait(1)
                local rolledAbilities = getRolledAbilities()
                local found = false
                for _i, ability in rolledAbilities do     
                    if (ability.potential >= RollSettings.Threshold) or (ability.potential >= AbilityDict[ability.name] and AbilityDict[ability.name] ~= 0) then
                        found = true
                        if RollSettings.Store then
                            ability.accept()
                        else
                            Toggles.AutoRoll = false
                            return
                        end
                    end
                end
    
                if found then
                    wait(1)  
                end
        
                clickEndRoll()

                wait(0.3)
        
                print("rolling again")
        
                Rep.Reroll:InvokeServer(nil, nil, true)
            end)
        end
    end
end)

local function autoRoll()
    count = 0
    Rep.Reroll:InvokeServer(nil, nil, true)
end

spawn(function()
	while wait() do
		game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
            local Players = Get.Players
            local Player = Players.LocalPlayer
            attack = nil
		end)
		game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").Died()
	end
end)


RunService.Stepped:Connect(
   function()
       if Toggles.Farm then
           for i, v in pairs(Player.Character:GetChildren()) do
               if v:IsA("BasePart") then
                   v.CanCollide = false
               end
           end
       end
   end
)


farm()






local UILibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheOnlineCat/Codes/main/Twink's%20UILib%20Modified", true))()

local MainUI = UILibrary.Load("Much Ultra, Very Fair")

local PageFarm = MainUI.AddPage("Farm", false)
    
local FarmToggle = PageFarm.AddToggle("Auto Farm (Set Aura Hit Mode)", false, function(value)
    Toggles.Farm = value
end)

local SliderFarmDistance = PageFarm.AddSlider("Farm Distance", {Min = 0, Max = 15, Def = FarmSettings.FarmDistance}, function(value)
    FarmSettings.FarmDistance = value
    Save("FarmSettings", FarmSettings)
end)

local SliderAuraDistance = PageFarm.AddSlider("Farm Aura Distance", {Min = 0, Max = 20, Def = FarmSettings.AuraDistance}, function(value)
    FarmSettings.AuraDistance = value
    Save("FarmSettings", FarmSettings)
end)

local KillToggle = PageFarm.AddToggle("Kill Players while Farming (Uses Kill Aura Distance)", FarmSettings.KillPlayers, function(value)
    FarmSettings.KillPlayers = value
    Save("FarmSettings", FarmSettings)
end)

local BossToggle = PageFarm.AddToggle("Auto Boss Kill", false, function(value)
    Toggles.FarmBoss = value
    if value then
        BossFarm()
    end
end)

local QuestSelect = PageFarm.AddDropdown("Quest Select", {
    "Real Amgogus",
    "Gaming Disorder",
    "Kingdom",
    "Rigged Game",
    "Trouble in the backrooms",
    "Something is in the sewers",
    "Cooking some crossovers",
    "Troubles from another timeline"
    }, function(value)
        FarmSettings.SelectedQuest = value
        Save("FarmSettings", FarmSettings)
end, FarmSettings.SelectedQuest)



local PageKillAura = MainUI.AddPage("Kill Aura", false)

local KillAuraToggle = PageKillAura.AddToggle("Kill Aura", false, function(value)
    Toggles.KillAura = value
end)

local MobAuraToggle = PageKillAura.AddToggle("Only Mob Kill Aura (Overrides Kill Aura)", false, function(value)
    Toggles.MobAura = value    
end)

local SliderKillDistance = PageKillAura.AddSlider("Kill Aura Distance", {Min = 0, Max = 500, Def = AuraSettings.KillDistance}, function(value)
    AuraSettings.KillDistance = value
    Save("AuraSettings", AuraSettings)
end)

local SliderPunchSpeed = PageKillAura.AddSlider("Hit Speed (ms)", {Min = 1, Max = 1000, Def = AuraSettings.PunchSpeed * 1000}, function(value)
    AuraSettings.PunchSpeed = value/1000
    Save("AuraSettings", AuraSettings)
end)

-- local Label1 = PageKillAura.AddLabel("Choose Aura Mode")

local AuraMode = PageKillAura.AddDropdown("Aura Hit Mode",
    {   
    "Punch",
    "Dark Blade (Arbiter Only)",
    "Energy Blade"
    }, function(value)
        AuraSettings.Mode = value
        Save("AuraSettings", AuraSettings)
end, AuraSettings.Mode)



local PageRoll = MainUI.AddPage("Roll", false)

local RollAbility = PageRoll.AddButton("Roll Ability", function()
    Rep.Reroll:InvokeServer()
end)

local Roll10Ability = PageRoll.AddButton("Roll 10 Abilities", function()
    Rep.Reroll:InvokeServer(nil, nil, true)
end)

local ToggleAutoRoll = PageRoll.AddToggle("Auto Roll Ability", false, function(value)
    Toggles.AutoRoll = value
    RerollPath.Enabled = true
    if value then
        autoRoll()
    end
end)

-- local ToggleAutoRoll = PageRoll.AddToggle("Hide GUI when Auto", false, function(value)
--     RollSettings.Hide = value
--     RerollPath.Enabled = true
-- end)


local RollThreshold = PageRoll.AddSlider("Roll Minimum Level (Global)", {Min = 0, Max = 30, Def = RollSettings.Threshold}, function(value)
    RollSettings.Threshold = value
    Save("RollSettings", RollSettings)
end)


local AutoStore = PageRoll.AddToggle("Auto Store Ability", RollSettings.Store, function(value)
    RollSettings.Store = value
    Save("RollSettings", RollSettings)
end)


local LabelRoll = PageRoll.AddLabel("Equipment Roll")

local RollFist = PageRoll.AddButton("Roll Fist", function()
    for i = 1, RollSettings.Amount do
        local args = {
            [1] = "Fist"
        }

        game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack(args))
    end
end)

local RollStyle = PageRoll.AddButton("Roll Style", function()
    for i = 1, RollSettings.Amount do
        local args = {
            [1] = "Relic"
        }

        game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack(args))
    end
end)

local SliderGear = PageRoll.AddSlider("Equipment Roll Amount", {Min = 0, Max = 100, Def = RollSettings.Amount}, function(value)
    RollSettings.Amount = value
    Save("RollSettings", RollSettings)
end)



local PageAutoRoll = MainUI.AddPage("Auto Config", true)

local Button1 = PageAutoRoll.AddButton("Set Minimum Levels (Overrides Global, 0 is OFF)", function()
    for i, v in pairs(AbilityDict) do
        print("key: "..i.. " value: ".. v)
    end
end)

local AbilitySliders = {}

for i, v in pairs(AbilityList) do
    table.insert(AbilitySliders, (PageAutoRoll.AddSlider(v, {Min = 0, Max = 30, Def = AbilityDict[v]}, function(value)
        AbilityDict[v] = value
        Save("AbilityFilter", AbilityDict)
    end)))
end



local PageMisc = MainUI.AddPage("Misc", false)

-- local HideName = PageMisc.AddButton("Hide Identity (Continuous)", function()
-- 	spawn(function()
-- 		while true do
--     		HideName()
--     		wait(1)
--     	end
-- 	end)
-- end)

local AttackBarrier = PageMisc.AddToggle("Damage Arlo Boss Barrier", false, function(value)
    Toggles.BreakBarrier = value
end)

local Reset = PageMisc.AddButton("Reset Character", function()
    Player.Character.Humanoid.Health = 0
end)
