local ArrayField = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/ArrayField/main/Source.lua'))()


getgenv().Get = setmetatable({}, {__index = function(Self, Idx) return game:GetService(Idx) end})

local Players = Get.Players
local Player = Players.LocalPlayer
local Workspace = Get.Workspace
local RunService = Get.RunService
local Rep = Get.ReplicatedStorage
local HttpService = Get.HttpService
local TeleportService = Get.TeleportService

local groupId = 15508585
local privilegeThreshold = 150


getUserData = function() return getupvalue(getconnections(Player.PlayerGui.MainClient.Equipped.Relic.enhance.MouseButton1Click)[1].Function, 4) end


getgenv().AbilityDict = {}
local RerollPath = Player.PlayerGui.Reroll
local AbilityList = {}


for i, v in pairs(RerollPath.Prompt.Prompt.ScrollingFrame:GetChildren()) do
    if v:IsA("TextButton") then
        table.insert(AbilityList, v.Name)
    end
end


local VirtualUser = game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)


local Old = getsenv(Player.PlayerScripts.MoveHandler)

hookfunction(Old.camshake, function()
    return
end)

hookfunction(Old._G.knockback, function()
    return
end)

hookfunction(Old._G.HitEffect, function()
    return
end)
hookfunction(Old._G.flasheffect, function()
    return
end)

hookfunction(Old.addparticle, function()
    return
end)

local MobList = {}
for i, v in pairs(require(Workspace.EnemyStats)) do
    table.insert(MobList, i) --append name to list
end


local function activateAbility()
    local args = {[1] = false} 
    Rep.ToggleAbility:InvokeServer(unpack(args))
end

local function check(e)
    local script = game:GetService("Players").LocalPlayer.PlayerGui.MainClient.LocalScript
    if getfenv(e) and getfenv(e).script and getfenv(e).script.Name and getfenv(e).script == script then
        return true
    else
        return false
    end
end

local function getDistanceTo(object) 
    return (Player.Character.HumanoidRootPart.Position - object:GetModelCFrame().Position).Magnitude
end

local function getNearestMobs(Type)
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model")  then
            if ArrayField.Flags.farm then
                if not(table.find(Type, v.Name)) then
                    continue
                end
            elseif ArrayField.Flags.mobAura then
                if not(table.find(MobList, v.Name)) then
                    continue
                end
            elseif ArrayField.Flags.killAura then
                if not(v:FindFirstChildWhichIsA("Humanoid")) or v.Name == Player.Name then
                    continue
                end
            end
            
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = getDistanceTo(v)
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end

local function getNearestObstacles(barrierOnly)
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model") and (not(table.find(MobList, v.Name)) or v.Name == "Barrier") and v.Name ~= Player.Name then
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if barrierOnly and not v.Name == "Barrier" then
                continue
            end
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = getDistanceTo(v)
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end


local attack = nil
local CurrentEnemy = nil
local PunchCounter = 0

local function AttackFuncGet()
    for _,v in pairs(getgc()) do
        if type(v) == 'function' and check(v) then
            if(debug.getinfo(v).numparams) == 4 then
                attack = v
            end
        end
    end
end


local function Punch(enemy)
    if CurrentEnemy ~= nil and CurrentEnemy == enemy then
        PunchCounter += 1
    else
        CurrentEnemy = enemy
        PunchCounter = 0
    end
    if PunchCounter >= 5 then
        PunchCounter = 0
    end


    if attack then
        attack(Vector3.new(ArrayField.Flags.killDistance, ArrayField.Flags.killDistance, ArrayField.Flags.killDistance),CFrame.new(0,0,0),6,nil)
    else
        AttackFuncGet()
    end
end

local function ArbiterHit(enemy)
    local args = {
        [1] = "Dark Blade",
        [2] = enemy:FindFirstChildWhichIsA("Humanoid")
    }
    Rep.Damage:FireServer(unpack(args))
    Rep.Damage:FireServer(unpack(args))
    Rep.Damage:FireServer(unpack(args))
end

-- local function ArbiterUlt(Enemy)
--     local args = {
--         [1] = "Dark Blade",
--         [2] = Enemy:FindFirstChildWhichIsA("Humanoid"),
--         [4] = {["Ultimate"] = true}
--     }
--     Rep.Damage:FireServer(unpack(args))
-- end

local function EnergyBlade(enemy)
    local args = {
        [1] = "DualSwordHeavy",
        [2] = enemy:FindFirstChildWhichIsA("Humanoid"),
        [3] = Player.Character.Cancellations.CurrentValue,
        [4] = {
            [1] = enemy:FindFirstChildWhichIsA("Humanoid")
        }
    }
    Rep.Damage:FireServer(unpack(args))
end



local function hit(enemy)
    if ArrayField.Flags.auraMode == "Punch" then
        Punch(enemy)
        wait(ArrayField.Flags.hitDelay)
    elseif ArrayField.Flags.auraMode == "Dark Blade (Arbiter Only)" then
        ArbiterHit(enemy)
        wait(ArrayField.Flags.hitDelay)
    elseif ArrayField.Flags..auraMode == "Energy Blade" then
        EnergyBlade(enemy)
        wait(ArrayField.Flags.hitDelay)
    end
end


local function quest(quest)
    local args = {
        [1] = quest
    } 
    Rep.TakeQuest:FireServer(unpack(args))
end


local function getQuestMobs(quest)
    local enemyType
    if quest == "Real Amgogus" then 
        enemyType = {"Cripple"}
    elseif quest == "Gaming Disorder" then 
        enemyType = {"Crail"}
    elseif quest == "Kingdom" then 
        enemyType = {"Blyke", "Isen", "Remi", "Zeke"}
    elseif quest == "Rigged Game" then 
        enemyType = {"Arlo", "John", "Seraphina"}
    elseif quest == "Trouble in the backrooms" then 
        enemyType = {"Seer", "John", "Seraphina"}
    elseif quest == "Something is in the sewers" then 
        enemyType = {"Cultist"}
    elseif quest == "Cooking some crossovers" then 
        enemyType = {"Thunderclap"}
    elseif quest == "Troubles from another timeline" then 
        enemyType = {"Roku"}
    elseif quest == "From another world" then 
        enemyType = {"Otherworlders"}
    elseif quest == "Ultra Fair" then 
        enemyType = {"God"}
    end
    return(enemyType)
end

local function getOffsetVector(enemy)
    local Vector = Player.Character.HumanoidRootPart.Position - enemy:GetModelCFrame().Position
    local Distance = Vector.Magnitude
    local Normal = Vector3.new(Vector.x/Distance, Vector.y/Distance, Vector.z/Distance)
    local Offset = Normal * ArrayField.Flags.farmDistance
    local NewPosition = enemy:GetModelCFrame().Position + Offset
    return NewPosition
end

local BossFight = false



local function farm()
    spawn(function()
        local killedBoss = true;
        while wait() do
            if not BossFight then
                if ArrayField.Flags.farm then
                    
                    pcall(function()
                        if not Player.PlayerGui.MainClient.Quest.visible then
                            quest(ArrayField.Flags.quest)
                        else
                            local questCount = Player.PlayerGui.MainClient.Quest.Folder.Objective.progress.text:split("/")
                            if questCount[1] == questCount[2] then
                                quest("Completed")
                            end
                        end
            

                        if not Player.Character:FindFirstChild("Head"):FindFirstChild("LeftGlow") then
                            activateAbility()
                        end

                        local enemyType = getQuestMobs(ArrayField.Flags.quest)
                        local enemy = getNearestMobs(enemyType)
                        local currentDistance = getDistanceTo(enemy)

                        local obstacle
                        local enemyBarrier = false

                        obstacle = getNearestObstacles(false)
                        if obstacle.Name ~= "Barrier" and not (getDistanceTo(obstacle) < ArrayField.Flags.killDistance) then
                            enemyBarrier = false
                        end
                        if currentDistance < ArrayField.Flags.farmAuraDistance then
                            local enemyHp = enemy:FindFirstChildWhichIsA("Humanoid").Health
                            hit(enemy)
                            if (enemyHp - enemy:FindFirstChildWhichIsA("Humanoid").Health) == 0 then
                                enemyBarrier = true
                            end
                        elseif ArrayField.Flags.killPlayers and obstacle and getDistanceTo(obstacle) < ArrayField.Flags.killDistance then
                            hit(obstacle)
                        else
                            if currentDistance >= 300 then
                                Player.Character:MoveTo(getOffsetVector(enemy) + Vector3.new(0, 3, 0))
                            else
                                Player.Character.Humanoid:MoveTo(getOffsetVector(enemy))
                            end
                            killedBoss = true
                        end
                        if obstacle.Name == "Barrier" and currentDistance < ArrayField.Flags.farmAuraDistance and enemyBarrier then
                            hit(obstacle)
                        end
                    end
                    )

                elseif (ArrayField.Flags.killAura or ArrayField.Flags.mobAura) and not ArrayField.Flags.farm and killedBoss then

                    pcall(function()
                        local enemy = getNearestMobs()
                        if getDistanceTo(enemy) < ArrayField.Flags.killDistance then
                            hit(enemy)
                        end
                    end)

                end
            else
                killedBoss = false
            end
        end
    end)
end


local B = Workspace:FindFirstChild("BossSpawns") --Get enemy names and stats
local BossList = {}
local BossPosition = nil
for i, v in pairs(B:GetChildren()) do
    if (BossPosition == nil) then
        BossPosition = v.CFrame.Position
    end
    table.insert(BossList, v.Name) --append name to list
end


local function LocateBoss()
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model") and table.find(BossList , v.Name) then
            if (v:GetModelCFrame().Position - BossPosition).Magnitude < 30 then
                return v
            end
        end
    end    
end


local function BossFarm()
    spawn(function()
        while wait() and ArrayField.Flags.bossKill do
            pcall(function()
                if Player.PlayerGui.Boss.Enabled == true then
                    BossFight = true
                    local Boss = LocateBoss()
                    wait(0.1)
                    for i,v in pairs(getconnections(Player.PlayerGui.Reroll.bosstp.Yes.MouseButton1Click)) do
                        v.Function()
                    end
                    
                    pcall(function()
                        while Boss.Humanoid.Health > 0 and ArrayField.Flags.bossKill and Boss do
                            Boss = LocateBoss()
                            if not Player.Character:FindFirstChild("Head"):FindFirstChild("LeftGlow") then
                                activateAbility()
                            end

                            if getDistanceTo(Boss)  < ArrayField.Flags.killDistance then
                                hit(Boss)
                            else 
                                Player.Character.Humanoid:MoveTo(getOffsetVector(Boss))
                                wait(0.1)
                            end
                            if ArrayField.Flags.damageBossBarrier then
                                local Barrier = getNearestObstacles(true)
                                if getDistanceTo(Barrier) < ArrayField.Flags.killDistance  then
                                    hit(Barrier)
                                end
                            end
                        end
                    end)
                    BossFight = false
                end
                wait(0.1)
            end)
        end
    end)
end





local function getRolledAbilities()
    local abilityResults = {}
    for _i, ability in RerollPath.Rerolls.ScrollingFrame:GetChildren() do
        if (ability.Name ~= "RollTemplate")  then
            continue
        end
        for i, v in next, getconnections(ability.RollTemplate.Accept.MouseButton1Click) do
            for i2, v2 in next, getupvalues(v.Function) do
                if(type(v2) == "table" and v2.Ability) then
                    local ability = {name = nil, potential = nil, accept = nil}
                    ability.name = v2.Ability
                    ability.potential = v2.Potential
                    ability.accept = v.Function
                    table.insert(abilityResults, ability)
                end
            end
        end
    end
    return abilityResults
end

local x = RerollPath.Rerolls.X.AbsolutePosition.X + RerollPath.Rerolls.X.AbsoluteSize.X / 2
local y = RerollPath.Rerolls.X.AbsolutePosition.Y + RerollPath.Rerolls.X.AbsoluteSize.Y


local function clickEndRoll() 
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
end



local count = 0
game:GetService("Players").LocalPlayer.PlayerGui.Reroll.ChildAdded:Connect(function(child)
    if ArrayField.Flags.hideRollGui then
        Player.PlayerGui.Reroll.Rerolls.BackgroundTransparency = 1
        Player.PlayerGui.Reroll.Rerolls.UIStroke.Enabled = false
        Player.PlayerGui.Reroll.Rerolls.ScrollingFrame.visible = false
    end

    if(not ArrayField.Flags.autoRoll) then
        return
    end

    if child.Name == "Finished" then
        count = count + 1
        if (count >= 10) then
            count = 0
            spawn(function()
                wait(1)
                local rolledAbilities = getRolledAbilities()
                local found = false
                for _i, ability in rolledAbilities do     
                    if (
						(ability.potential >= ArrayField.Flags.globalMinLevel) or 
						ArrayField.Flags["ability_"..ability.name] == nil or 
						(ability.potential >= ArrayField.Flags["ability_"..ability.name] and ArrayField.Flags["ability_"..ability.name] ~= 0)
					) then

                        found = true

                        Player.PlayerGui.Reroll.Rerolls.BackgroundTransparency = 0.5
                        Player.PlayerGui.Reroll.Rerolls.UIStroke.Enabled = true
                        Player.PlayerGui.Reroll.Rerolls.ScrollingFrame.visible = true

                        if ArrayField.Flags.storeAbility then
                            ability.accept()
                        else
                            ArrayField.Flags.autoRoll = false
							-- AutoRollToggle:Set(false)
                            return
                        end
                    end
                end
    
                if found then
                    wait(1)  
                end
                
                repeat
                clickEndRoll()
                wait(0.3)
                until not RerollPath.Rerolls.visible or not ArrayField.Flags.autoRoll

                print("rolling again")
        
                repeat
                    Rep.Reroll:InvokeServer(nil, nil, true)
                    wait(2)
                until RerollPath.Rerolls.visible or not ArrayField.Flags.autoRoll
            end)
        end
    end
end)

local function autoRoll()
    count = 0
    Rep.Reroll:InvokeServer(nil, nil, true)
end



local function massUpgrade(type, ignoreUpgraded, threshold)
    spawn(function()
        local validMaterials = {}

        local data = {}
        if type == "Fist" then
            data = getUserData().Fists
        else
            data = getUserData().Relics
        end

        for id, fields in data do
            if(ignoreUpgraded and fields.BaseLevel ~= fields.Level) then 
                continue 
            end
            if fields.Level <= threshold then
                table.insert(validMaterials, id)
            end
        end

        repeat
            local args = {
                [1] = type,
                [2] = {
                    [1] = table.remove(validMaterials),
                    [2] = table.remove(validMaterials),
                    [3] = table.remove(validMaterials),
                    [4] = table.remove(validMaterials),
                }
            }
            Rep.UpgradeItem:InvokeServer(unpack(args))
        until #validMaterials < 4

        while #validMaterials > 0 do
            local args = {
                [1] = type,
                [2] = {
                    [1] = table.remove(validMaterials)
                }
            }
            Rep.UpgradeItem:InvokeServer(unpack(args))
        end

    end)
end


local function autoLuck()
    spawn(pcall(function()
        while ArrayField.Flags.autoLuck do

            local data = getUserData()

            if(data == nil) then
                continue
            end

            if data.LastSelfGamble == nil or os.time() > data.LastSelfGamble then
                local args = {
                    [1] = "Self Gamble",
                    [2] = {
                        ["Color"] = Color3.new(1, 0.8509804010391235, 0.30980393290519714),
                        ["Boost"] = "Ultra Lucky"
                    }
                }
                
                Rep.Remotes.SkillCast:FireServer(unpack(args))
            end
            
            if data.LastGroupGamble == nil or os.time() > data.LastGroupGamble then
                local args = {
                    [1] = "Group Gamble",
                    [2] = {
                        ["Color"] = Color3.new(1, 0.8509804010391235, 0.30980393290519714),
                        ["Boost"] = "Super Lucky",
                        ["HitPlayers"] = {
                            [1] = Player
                        }
                    }
                }
                
                Rep.Remotes.SkillCast:FireServer(unpack(args))
            end

            wait(3)
        end
    end))
end


local function getServerList(placeId)
    local servers = {}
    local cursor = ""
    local currentJobId = game.JobId

    repeat
        local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
        local response = game:HttpGet(url)
        local data = HttpService:JSONDecode(response)
        
        for _, server in ipairs(data.data) do
            if server.playing < server.maxPlayers and server.id ~= currentJobId then
                table.insert(servers, server.id)
            end
        end
        
        cursor = data.nextPageCursor
    until not cursor

    return servers
end

local function serverHop()
    local gameId = game.PlaceId
    local servers = getServerList(gameId)
    if #servers > 0 then
        local newServerId = servers[math.random(1, #servers)]
        print("Hopping to server: " .. newServerId)
        TeleportService:TeleportToPlaceInstance(gameId, newServerId, Player)
    else
        Player:Kick("No servers found.")
    end
end


local function getUserGroupRank(userId, groupId)
    local url = "https://groups.roblox.com/v1/users/" .. userId .. "/groups/roles"
    local response = game:HttpGet(url)
    local data = HttpService:JSONDecode(response)
    
    for _, groupInfo in ipairs(data.data) do
        if groupInfo.group.id == groupId then
            return groupInfo.role.rank
        end
    end
    
    return nil
end

local function checkCurrentMods()
    if ArrayField.Flags.leaveOnMod then
        for index, player in Players:GetChildren() do
            spawn(function()
                local rank = getUserGroupRank(player.userId, groupId)
                if rank and rank >= privilegeThreshold then
                    print("Privileged member is here: " .. player.Name .. " with rank: " .. rank)
                    serverHop()
                end
            end)
        end
    end
end


spawn(function()
	while wait() do
		game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
            local Players = Get.Players
            local Player = Players.LocalPlayer
            attack = nil
		end)
		game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").Died()
	end
end)


RunService.Stepped:Connect(
   function()
       if ArrayField.Flags.farm then
           for i, v in pairs(Player.Character:GetChildren()) do
               if v:IsA("BasePart") then
                   v.CanCollide = false
               end
           end
       end
   end
)



Players.PlayerAdded:Connect(function(player)
    if ArrayField.Flags.leaveOnMod then
        local userId = player.UserId
        local rank = getUserGroupRank(userId, groupId)
        
        if rank and rank >= privilegeThreshold then
            print("Privileged member joined: " .. player.Name .. " with rank: " .. rank)
            serverHop()
        end
    end
    
end)




-- spawn(checkCurrentMods)
-- spawn(autoLuck)
farm()


local Window = ArrayField:CreateWindow({
	Name = "Much Ultra, Very Fair", 
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "MUVF", -- Create a custom folder for your hub/game
		FileName = "Ultra Unfair"
	 },
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})


local FarmTab = Window:CreateTab("Farm", 4483362458)

local FarmToggle = FarmTab:CreateToggle({
	Name = "Auto Farm (Set Aura Hit Mode)",
	CurrentValue = false,
	Flag = "farm",
	Callback = function(value) end
})

local KillPlayersToggle = FarmTab:CreateToggle({
	Name = "Kill Players while Farming (Uses Kill Aura Distance)",
	CurrentValue = false,
	Flag = "killPlayers",
	Callback = function(value) end
})

local KillBossToggle = FarmTab:CreateToggle({
	Name = "Auto Boss Kill",
	CurrentValue = false,
	Flag = "bossKill",
	Callback = function(value)
		if value then
			BossFarm()
		end
	end
})

local FarmDistanceSlider = FarmTab:CreateSlider({
	Name = "Farm Distance",
	Range = {0, 20},
	CurrentValue = 6,
	Increment = 1,
	Suffix = "units",
	Flag = "farmDistance",
	Callback = function(value) end
})

local FarmAuraDistanceSlider = FarmTab:CreateSlider({
	Name = "Farm KillAura Distance",
	Range = {0, 40},
	CurrentValue = 10,
	Increment = 1,
	Suffix = "units",
	Flag = "farmAuraDistance",
	Callback = function(value) end
})

local QuestDropdown = FarmTab:CreateDropdown({
	Name = "Quest Select",
	CurrentOption = "Real Amgogus",
	Options = {
        "Real Amgogus",
		"Gaming Disorder",
		"Kingdom",
		"Rigged Game",
		"Trouble in the backrooms",
		"Something is in the sewers",
		"Cooking some crossovers",
		"Troubles from another timeline",
		"From another world",
		"Ultra Fair"
        },
	Flag = "quest",
	Callback = function(value) end
})

local KillTab = Window:CreateTab("Kill Aura", 4483362458)

local KillAuraToggle = KillTab:CreateToggle({
	Name = "Kill Aura",
	CurrentValue = false,
	Flag = "killAura",
	Callback = function(value) end
})

local MobKillAuraToggle = KillTab:CreateToggle({
	Name = "Only Mob Kill Aura (Overrides Kill Aura)",
	CurrentValue = false,
	Flag = "mobAura",
	Callback = function(value) end
})

local KillAuraDistance = KillTab:CreateSlider({
	Name = "Kill Aura Distance",
	Range = {0, 300},
	CurrentValue = 30,
	Increment = 1,
	Suffix = "units",
	Flag = "killDistance",
	Callback = function(value) end
})

local HitDelaySlider = KillTab:CreateSlider({
	Name = "Hit Delay",
	Range = {1, 3000},
	CurrentValue = 150,
	Increment = 5,
	Suffix = "ms",
	Flag = "hitDelay",
	Callback = function(value) end
})

local AuraModeDropdown = KillTab:CreateDropdown({
	Name = "Aura Hit Mode",
	CurrentOption = "Punch",
	Options = {   
        "Punch",
        "Dark Blade",
        "Energy Blade"
        },
	Flag = "auraMode",
	Callback = function(value) end
})

local RollTab = Window:CreateTab("Roll", 4483362458)


RollTab:CreateButton({
	Name = "Roll Ability",
	Callback = function()
        Rep.Reroll:InvokeServer()
    end   
})

RollTab:CreateButton({
	Name = "Roll 10 Abilities",
	Callback = function()
        Rep.Reroll:InvokeServer(nil, nil, true)
    end   
})


local AutoRollToggle = RollTab:CreateToggle({
	Name = "Auto Roll Ability",
	CurrentValue = false,
	Flag = "autoRoll",
	Callback = function(value)
		if value then
			autoRoll()
		end
    end
})

local RollMinimumLevelSlider = RollTab:CreateSlider({
	Name = "Roll Minimum Level (Global)",
	Range = {0, 30},
	CurrentValue = 20,
	Increment = 0.1,
	Suffix = "Level",
	Flag = "globalMinLevel",
	Callback = function(value) end
})


local HideGuiToggle = RollTab:CreateToggle({
	Name = "Hide GUI when Auto",
	CurrentValue = false,
	Flag = "hideRollGui",
	Callback = function(value) end
	
})

local AutoStoreToggle = RollTab:CreateToggle({
	Name = "Auto Store Ability",
	CurrentValue = false,
	Flag = "storeAbility",
	Callback = function(value) end
	
})

RollTab:CreateSection("Equipment Roll",false)

local RollAmountSlider = RollTab:CreateSlider({
	Name = "Equipment Roll Amount",
	Range = {1, 500},
	CurrentValue =  100,
	Increment = 5,
	Suffix = "Rolls",
	Flag = "rollAmount",
	Callback = function(value) end
})


RollTab:CreateButton({
	Name = "Roll Fist",
	Callback = function()
        for i = 1, RollAmountSlider.CurrentValue do
			game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack({[1] = "Fist"}))
		end
    end   
})

RollTab:CreateButton({
	Name = "Roll Style",
	Callback = function()
        for i = 1, RollAmountSlider.CurrentValue do
			game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack({[1] = "Relic"}))
		end
    end   
})



local UpgradeTab = Window:CreateTab("Upgrade", 4483362458)

local UpgradeThresholdSlider = UpgradeTab:CreateSlider({
	Name = "Material Level Threshold",
	Range = {0, 10},
	CurrentValue =  5,
	Increment = 0.1,
	Suffix = "Level",
	Flag = "upgradeThreshold",
	Callback = function(value) end
})

local IgnoreUpgradedToggle = UpgradeTab:CreateToggle({
	Name = "Ignore Upgraded As Material",
	CurrentValue = false,
	Flag = "ignoreUpgraded",
	Callback = function(value) end
	
})

UpgradeTab:CreateButton({
	Name = "Mass Upgrade Current Fist",
	Callback = function()
        massUpgrade("Fist", IgnoreUpgradedToggle.CurrentValue, UpgradeThresholdSlider.CurrentValue)
    end   
})

UpgradeTab:CreateButton({
	Name = "Mass Upgrade Current Relic",
	Callback = function()
        massUpgrade("Relic", IgnoreUpgradedToggle.CurrentValue, UpgradeThresholdSlider.CurrentValue)
    end   
})


local AutoTab = Window:CreateTab("Auto Config", 4483362458)

AutoTab:CreateSection("Set Minimum Levels (Overrides Global, 0 is OFF)",false)

for i, abil in AbilityList do
    table.insert({}, (
		AutoTab:CreateSlider({
			Name = abil,
			Range = {0, 30},
			CurrentValue =  0,
			Increment = 0.1,
			Suffix = "Level",
			Flag = "ability_"..abil,
			Callback = function(value) end
		})
	))
end


local LuckTab = Window:CreateTab("Luck", 4483362458)


local AutoLuckToggle = LuckTab:CreateToggle({
	Name = "Auto Cast Ultra & Super Luck",
	CurrentValue = false,
	Flag = "autoLuck",
	Callback = autoLuck
})

local playerlist = {}

for _i, player in Players:GetChildren() do
	table.insert(playerlist, player.Name)
end

local LuckTargetDropdown = LuckTab:CreateDropdown({
	Name = "Targeted Player(s)",
	Options = playerlist,
	CurrentOption = playerlist[0],
	MultiSelection = true,
	Callback = function(value) end
})


local LuckTypeDropdown = LuckTab:CreateDropdown({
	Name = "Luck Type",
	CurrentOption = "Lucky",
	Options = {   
		"Bad Luck",
        "Lucky",
        "Super Lucky",
        "Ultra Lucky"
        },
	Flag = "luckType",
	Callback = function(value) end
	
})

LuckTab:CreateButton({
	Name = "Give Luck to Player",
	Callback = function()
		for player in LuckTargetDropdown.CurrentOption do
			local args = {
				[1] = "Group Gamble",
				[2] = {
					["Color"] = Color3.new(),
					["Boost"] = LuckTypeDropdown.CurrentOption,
					["HitPlayers"] = {
						[1] = player
					}
				}
			}
			
			Rep.Remotes.SkillCast:FireServer(unpack(args))
		end
    end
})



local MiscTab = Window:CreateTab("Misc", 4483362458)

MiscTab:CreateToggle({
	Name = "Damage Arlo Boss Barrier",
	CurrentValue = false,
	Flag = "damageBossBarrier",
	Callback = function(value) end
})

MiscTab:CreateButton({
	Name = "Reset Character",
	Callback = function()
		Player.Character.Humanoid.Health = 0
    end
})

MiscTab:CreateButton({
	Name = "Server Hop",
	Callback = serverHop
})

MiscTab:CreateToggle({
	Name = "Auto Server Hop on Moderator Join",
	CurrentValue = true,
	Flag = "leaveOnMod",
	Callback = checkCurrentMods
})


ArrayField:LoadConfiguration()
