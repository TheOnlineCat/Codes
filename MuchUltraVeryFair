repeat wait() until game:IsLoaded()
getgenv().Get = setmetatable({}, {__index = function(Self, Idx) return game:GetService(Idx) end})
getgenv().ToggleFarm = false
getgenv().ToggleKillAura = false
getgenv().ToggleMobAura = false

getgenv().AuraDistance = 6
getgenv().FarmDistance = 3
getgenv().KillPlayers = true
getgenv().KillDistance = 12

getgenv().PunchSpeed = 0.15
getgenv().SelectedQuest = nil
getgenv().RollAmount = 25

getgenv().ModePunch = false
getgenv().ModeArbiter = false


local EnemyBarrier = false



local Players = Get.Players
local Player = Players.LocalPlayer


local Workspace = Get.Workspace

local RunService = Get.RunService
local Rep = game:GetService("ReplicatedStorage")



local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end)

--Hide Name
function HideName()
    for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if v.ClassName == "BillboardGui" then
            v:Destroy()
        end
    end
end


RunService.Stepped:Connect(
   function()
       if ToggleFarm then
           for i, v in pairs(Player.Character:GetChildren()) do
               if v:IsA("BasePart") then
                   v.CanCollide = false
               end
           end
       end
   end
)


local Old = getsenv(Player.PlayerScripts.MoveHandler)
-- Improved Fps Due to these functions fucking up the game go figures
hookfunction(
Old.camshake,
function()
    return
end
)
hookfunction(
Old._G.knockback,
function()
    return
end
)
hookfunction(
Old._G.HitEffect,
function()
    return
end
)
hookfunction(
Old._G.flasheffect,
function()
    return
end
)
hookfunction(
Old.addparticle,
function()
    return
end
)



local function ActivateAbility()
    local args = {[1] = false} 
    game:GetService("ReplicatedStorage").ToggleAbility:InvokeServer(unpack(args))
end


A = require(Workspace.EnemyStats) --Get enemy names and stats
local MobList = {}
for i, v in pairs(A) do
    table.insert(MobList, i) --append name to list
end


local function getNearestMobs(Type)
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model")  then
            if ToggleFarm then
                if not(table.find(Type, v.Name)) then
                    continue
                end
            elseif ToggleMobAura then
                if not(table.find(MobList, v.Name)) then
                    continue
                end
            elseif ToggleKillAura then
                if not(v:FindFirstChildWhichIsA("Humanoid")) or v.Name == Player.Name then
                    continue
                end
            end
            
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = (Player.Character.HumanoidRootPart.Position - v:GetModelCFrame().Position).Magnitude
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end

local function getNearestObstacles()
    local LowestDistance = math.huge
    local Target
    for i, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Model") and (not(table.find(MobList, v.Name)) or v.Name == "Barrier") and v.Name ~= Player.Name then
            local Enemy = v:FindFirstChildWhichIsA("Humanoid")
            if Enemy and Enemy.Health ~= 0 then
                local CurrentDistance = (Player.Character.HumanoidRootPart.Position - v:GetModelCFrame().Position).Magnitude
                if CurrentDistance < LowestDistance then
                    LowestDistance = CurrentDistance
                    Target = v
                end
            end
        end
    end
    return Target
end



local function Punch(Enemy)
    if Enemy.Name == "Barrier" then
            Rep.Punch:FireServer(Enemy:FindFirstChildWhichIsA("Humanoid"), 6, Player.Character.Cancellations.Value, nil, 2)
            wait(PunchSpeed)
    else
        for i = 1, 5 do
            Rep.Punch:FireServer(Enemy:FindFirstChildWhichIsA("Humanoid"), i, Player.Character.Cancellations.Value, nil, 3)
            wait(PunchSpeed)
        end
    end
end

local function ArbiterHit(Enemy)
    local args = {
        [1] = "Dark Blade",
        [2] = Enemy:FindFirstChildWhichIsA("Humanoid")
    }
    Rep.Damage:FireServer(unpack(args))
end

local function ArbiterUlt(Enemy)
    local args = {
        [1] = "Dark Blade",
        [2] = Enemy:FindFirstChildWhichIsA("Humanoid"),
        [4] = {["Ultimate"] = true}
    }
    Rep.Damage:FireServer(unpack(args))
end

local function Hit(Enemy)
    if AuraMode == "Punch" then
        Punch(Enemy)
    elseif AuraMode == "Dark Blade (Arbiter Only)" then
        ArbiterHit(Enemy)
    elseif AuraMode == "Dark Blade Ult (Arbiter Only)" then
        ArbiterUlt(Enemy)
    end
end


local function Quest(Quest)
    local args = {
        [1] = Quest
    } 
    Rep.TakeQuest:FireServer(unpack(args))
end


local function GetQuestMobs(quest)
    if quest == "Real Amgogus" then 
        EnemyType = {"Cripple"}
    elseif quest == "Gaming Disorder" then 
        EnemyType = {"Crail"}
    elseif quest == "Kingdom" then 
        EnemyType = {"Blyke", "Isen", "Remi", "Zeke"}
    elseif quest == "Rigged Game" then 
        EnemyType = {"Arlo", "John", "Seraphina"}
    elseif quest == "Trouble in the backrooms" then 
        EnemyType = {"Seer", "John", "Seraphina"}
    end
    return(EnemyType)
end



local function GetOffsetVector(Enemy)
    local Vector = Player.Character.HumanoidRootPart.Position - Enemy:GetModelCFrame().Position
    local Distance = (Vector).Magnitude
    local Normal = Vector3.new(Vector.x/Distance, Vector.y/Distance, Vector.z/Distance)
    local Offset = Normal * FarmDistance
    local NewPosition = Enemy:GetModelCFrame().Position + Offset
    return NewPosition
end


local function Farm()
    spawn(function()
        while wait() do
            if ToggleFarm then
                
                pcall(function()
                
                    if not Player.PlayerGui.MainClient.Quest.visible then
                        Quest(SelectedQuest)
                    else
                        local QuestCount = Player.PlayerGui.MainClient.Quest.Folder.Objective.progress.text:split("/")
                        if QuestCount[1] == QuestCount[2] then
                            Quest("Completed")
                        end
                    end
        

                    if not Player.Character:FindFirstChild("Head"):FindFirstChild("LeftGlow") then
                        ActivateAbility()
                    end

                    local EnemyType = GetQuestMobs(SelectedQuest)
                    local Enemy = getNearestMobs(EnemyType)
                    local CurrentDistance = (Player.Character.HumanoidRootPart.Position - Enemy:GetModelCFrame().Position).Magnitude

                    local Obstacle
                    Obstacle = getNearestObstacles()
                    if Obstacle.Name ~= "Barrier" then
                        EnemyBarrier = false
                    end

                    if CurrentDistance < AuraDistance and not(EnemyBarrier) then
                        local Hp1 = Enemy:FindFirstChildWhichIsA("Humanoid").Health
                        Hit(Enemy)
                        if (Hp1 - Enemy:FindFirstChildWhichIsA("Humanoid").Health) == 0 then
                            EnemyBarrier = true
                        end
                    elseif KillPlayers and CurrentDistance < KillDistance then
                        Hit(Obstacle)
                    elseif Obstacle.Name == "Barrier" and CurrentDistance < AuraDistance then
                        Hit(Obstacle)
                    else
                        Player.Character.Humanoid:MoveTo(GetOffsetVector(Enemy))
                    end
                end
                )
            elseif (ToggleKillAura or ToggleMobAura) and not ToggleFarm then
                pcall(function()
                    local Enemy = getNearestMobs()
                    if (Player.Character.HumanoidRootPart.Position - Enemy:GetModelCFrame().Position).Magnitude < KillDistance then
                        Hit(Enemy)
                    end
                end)
            end
        end
    end)
end

Farm()

do
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/V1ca2q9s"))()

local MainUI = UILibrary.Load("Much Ultra, Very Fair")

local PageFarm = MainUI.AddPage("Farm", false)
    
local FarmToggle = PageFarm.AddToggle("Toggle Natural Farm", false, function(value)
    ToggleFarm = value
end)

local SliderFarmDistance = PageFarm.AddSlider("Farm Distance", {Min = 0, Max = 15, Def = 3}, function(value)
    FarmDistance = value
end)

local SliderAuraDistance = PageFarm.AddSlider("Aura Distance", {Min = 0, Max = 20, Def = 6}, function(value)
    AuraDistance = value
end)

local KillToggle = PageFarm.AddToggle("Kill Players (Uses Kill Aura Distance)", true, function(value)
    KillPlayers = value
end)

local QuestSelect = PageFarm.AddDropdown("Quest Select", {
    "Real Amgogus",
    "Gaming Disorder",
    "Kingdom",
    "Rigged Game",
    "Trouble in the backrooms"
    }, function(value)
        SelectedQuest = value
end)

local PageKillAura = MainUI.AddPage("Kill Aura", false)

local KillAuraToggle = PageKillAura.AddToggle("Kill Aura", false, function(value)
    ToggleKillAura = value

end)

local MobAuraToggle = PageKillAura.AddToggle("Only Mob Kill Aura (Overrides Kill Aura)", false, function(value)
    ToggleMobAura = value
end)

local SliderKillDistance = PageKillAura.AddSlider("Kill Aura Distance", {Min = 0, Max = 16, Def = 12}, function(value)
    KillDistance = value
end)

local SliderPunchSpeed = PageKillAura.AddSlider("Punch Speed (ms)", {Min = 0, Max = 3000, Def = 150}, function(value)
    PunchSpeed = value/1000
end)

-- local Label1 = PageKillAura.AddLabel("Choose Aura Mode")

local AuraMode = PageKillAura.AddDropdown("Choose Aura Mode",
    {   
    "Punch",
    "Dark Blade (Arbiter Only)"
    }, function(value)
        AuraMode = value
end)

local PageMisc = MainUI.AddPage("Misc", false)

local HideName = PageMisc.AddButton("Hide Identity", function()
    HideName()
end)

local Reset = PageMisc.AddButton("Reset Character", function()
    Player.Character.Humanoid.Health = 0
end)


local RollFist = PageMisc.AddButton("Roll Fist", function()
    for i = 1, RollAmount do
        local args = {
            [1] = "Fist"
        }

        game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack(args))
    end
end)

local RollStyle = PageMisc.AddButton("Roll Style", function()
    for i = 1, RollAmount do
        local args = {
            [1] = "Relic"
        }

        game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack(args))
    end
end)

local SliderGear = PageMisc.AddSlider("Roll Amount", {Min = 0, Max = 100, Def = 25}, function(value)
    RollAmount = value
end)
end
